<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[DJANGO框架如何实现用户多认证方式登录与第三方授权登录]]></title>
    <url>%2F2018%2F08%2F21%2FDJANGO%E6%A1%86%E6%9E%B6%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%B4%A6%E5%8F%B7%E7%99%BB%E5%BD%95%E4%B8%8E%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%2F</url>
    <content type="text"><![CDATA[多种认证方式登录Django框架提供了认证系统，详情看文档Django认证系统官方文档 在这个认证系统中，有一个用户认证的方法authenticate（）来验证一组凭据，默认的是username和password，官方调用源码如下： 123456from django.contrib.auth import authenticateuser = authenticate(username=&apos;john&apos;, password=&apos;secret&apos;)if user is not None: # A backend authenticated the credentialselse: # No backend authenticated the credentials 所以只需要重写这个方法，就可以实现多凭证登录。方法如下：1.在user应用下新建utils.py文件2.定义类继承Modelbackend，重写authenticate方法3.重写规则，代码如下 123456789101112131415161718192021# 重写authenticate方法，继承ModelBackend这个类来重写方法from django.contrib.auth.backends import ModelBackendfrom .models import Userclass UserModelBackend(ModelBackend): def authenticate(self, request, username=None, password=None, **kwargs): # 判断用户输入的是手机号还是用户名 try: # 查询对象，如果能查到对象则得到返回的对象 user = User.objects.filter(mobile=username) # 如果不是手机用户，则执行except except: # 判断是否用户名，与用户名对比 try: user = User.objects.filter(username=username) except: # 都不是返回空 return None # 如果查询到用户对象，则检查密码 if user.check_password(password): return user return None 4.配置中设置，settings中添加 123AUTHENTICATION_BACKENDS=[ 'users.utils.UsernameMobileModelBackend', ] 即可实现使用用户手机号登录。 授权第三方登录（QQ为例）]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>web,登录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于session与JWT的认证机制]]></title>
    <url>%2F2018%2F08%2F21%2F%E5%85%B3%E4%BA%8Esession%E4%B8%8EJWT%E7%9A%84%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[什么是状态保持说到状态保持，首先要讲一下什么是无状态，http 就是一种无状态协议，浏览器请求服务器是无状态的。 无状态指用户请求过一次后，浏览器与服务器无法知道这个用户做过什么，下一次请求还是新的请求。发生无状态的原因：浏览器与服务器之间是使用socket套接字通讯的，在一次访问结束后，服务器将访问结果返回给浏览器之后，会关闭当前的socket连接，浏览器在关闭后，服务器也会销毁当前的页面对象。 无状态协议1.协议对于事务处理没有记忆能力。2.对同一个 url 请求没有上下文关系。3.每次的请求都是独立的，它的执行情况和结果与前面的请求和之后的4请求是无直接关系的，它不会受前面的请求应答情况直接影响，也不会直接影响后面的请求应答情况。4.服务器中没有保存客户端的状态，客户端必须每次带上自己的状态去请求服务器。 有状态与无状态相反，相当于有记忆能力，可以记录之前用户的操作，即状态保持，那怎么实现状态保持呢？ CookieCookie的定义指某些网站为了辨别用户身份、进行会话跟踪而储存在用户本地的数据。（通常经过加密）cookie由服务器端生成，发送给客户端浏览器，浏览器可以将cookie的key/value进行保存，下次请求同一网站时就会将cookie同请求信息发送给服务器。通过cookie就实现了状态保持，即用户登陆过的信息，访问过的页面数据，都会被放在cookie里进行记录，保存在浏览器，下次请求这个网站时会发送给服务器，服务器就能从cookie中快速获取信息，即知道了用户已经登陆过，访问了哪些数据，保持了用户的登录状态，将相关数据快速呈现。 使用cookie的注意事项 cookie是基于域名安全的，不同域名的cookie是不能互相访问的，即同源策略。（在这个页面里可以嵌入窗口iframe，来访问其他域名的cookie） Cookie是存储在浏览器中的一段纯文本信息，建议不要存储敏感信息如密码，因为电脑上的浏览器可能被其它人使用。 因为cookie被放在请求报文里发送给服务器，所以服务器端可以通过request对象来获取cookie信息，进行操作。 设置cookie与获取cookie设置cookie获取response对象 1response.set_cookie(‘键’，‘值’，max_age=3600） max_age为过期时间，即第一次访问产生cookie之后，3600秒会自动删除。 获取cookie请求对象request 1request.cookies.get('键') 根据之前设置的键就能获取到cookie的值。 Sessioncookie说到建议不要保存用户的敏感信息，很容易会被破解，那么这些敏感信息怎么解决，比如用户登录的用户名，密码，这就要用到session来认证用户。 理解session的机制对于敏感的信息，要保存在服务器中，不能存储在浏览器中，而服务器采用的状态保持的方案就是session认证。当程序需要为某个客户端的请求创建一个session的时候，服务器首先检查这个客户端的请求里是否已包含了一个session标识 - 称为session id，如果已包含一个session id则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（如果检索不到，可能会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。 session依赖于cookie客户端在访问后，由服务端生成session，根据每一个session都会生成它的唯一标识（uuid），然后以session为键，这个唯一标识为值，存放在cookie里。同时服务端本地也会存session（非关系型数据库存储，如redis），以uuid为键，session的键值对为值，存进服务端本地，访问时，根据这个唯一标识在本地进行读取操作。 url重写技术由于cookie可以被人为的禁止，必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面，附加方式也有两种，一种是作为URL路径的附加信息，表现形式为http://...../xxx;jsessionid=ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764另一种是作为查询字符串附加在URL后面，表现形式为http://...../xxx?jsessionid=ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764这两种方式对于用户来说是没有区别的，只是服务器在解析的时候处理的方式不同，采用第一种方式也有利于把session id的信息和正常程序参数区分开来。为了在整个交互过程中始终保持状态，就必须在每个客户端可能请求的路径后面都包含这个session id。 表单隐藏字段技术另一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。比如下面的表单： &lt;form name=&quot;testform&quot; action=&quot;/xxx&quot;&gt; &lt;input type=&quot;text&quot;&gt; &lt;/form&gt; 在被传递给客户端之前将被改写成： &lt;form name=&quot;testform&quot; action=&quot;/xxx&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;jsessionid&quot; value=&quot;ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764&quot;&gt; &lt;input type=&quot;text&quot;&gt; &lt;/form&gt; 这种技术使用相对较少了。 session数据的读写读取session数据1session.get('键') 写入session数据1session['键'] = '值' JWTsession认证所显露的问题1.用户通过session认证，都要在服务器端做一次记录，而session是保存在服务器端的内存中，随着用户的增多，服务器端的开销会明显增大。2.而且用户下次请求还必须要请求在这台服务器上,这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。3.session是依赖于cookie，如果cookie被截获，很容易受到跨站请求伪造的攻击（csrf），安全性不足。这就引入了jwt认证机制 什么是JWTJWT，全名Json Web Token，是一种基于token的认证机制，类似于http协议也是无状态的，它不需要在服务端去保留用户的认证信息或者会话信息。这就意味着基于token认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。流程上是这样的： 用户使用用户名密码来请求服务器 服务器进行验证用户的信息 服务器通过验证发送给用户一个token 客户端存储token，并在每次请求时附送上这个token值 服务端验证token值，并返回数据 JWT的构成例：1eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ 如上所示，是一个JWT的token，分为三个部分 header头部第一部分header存两部分信息1234&#123; 'typ': 'JWT', # 声明类型为jwt 'alg': 'HS256' # 加密算法 HMAC SHA256&#125; 通过base64算法加密构成第一部分，eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 payload载荷载荷是存放有效信息的地方，有效信息分为三部分： 标准中注册的声明：iss: jwt签发者sub: jwt所面向的用户aud: 接收jwt的一方exp: jwt的过期时间，这个过期时间必须要大于签发时间nbf: 定义在什么时间之前，该jwt都是不可用的.iat: jwt的签发时间jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。 公共的声明：添加用户信息，不建议添加敏感信息，因为base64算法是对称算法，可解密 私有的声明：私有声明是提供者和消费者所共同定义的声明。定义一个payload 12345&#123; "sub": "1234567890", "name": "John Doe", "admin": true&#125; base64算法加密后就是第二段eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9 signaturejwt的第三部分是一个签证信息，签证信息由三部分组成：headerpayloadsecret这部分信息将header、payload中的base64加密后的信息连接成字符串，然后通过header里声明的HS256算法加上secret进行加密，就构成了jwt的第三部分。 123var encodedString = base64UrlEncode(header) + '.' + base64UrlEncode(payload);var signature = HMACSHA256(encodedString, 'secret'); 构成第三部分TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ三部分构成完整的JWT的token PS：secret是保存在服务端的，jwt签发也是在服务端，所以secret是服务端的私钥，不能泄露出去。虽然header和payload可以通过base64解密，但是没有secret是无法进行认证的，这就保证了安全性。 JWT的应用Django rest framework中应用jwt详情可参考文档网站：JWT官方文档 安装jwt应用1pip install djangorestframework-jwt 配置设置1234567891011REST_FRAMEWORK = &#123; 'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework_jwt.authentication.JSONWebTokenAuthentication', 'rest_framework.authentication.SessionAuthentication', 'rest_framework.authentication.BasicAuthentication', ),&#125;JWT_AUTH = &#123; 'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),&#125; JWT_EXPIRATION_DELTA指明jwt的有效期 使用jwt返回token1234567from rest_framework_jwt.settings import api_settingsjwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLERjwt_encode_handler = api_settings.JWT_ENCODE_HANDLERpayload = jwt_payload_handler(user)token = jwt_encode_handler(payload) 比如注册中使用token，因为token要返回输出，所以在定义序列化器时要添加token字段 1token = serializers.CharField(label='登录状态token', read_only=True) # 增加token字段 登录功能中使用JWT返回指定字段将上面的jwt应用于登录认证时，登录成功后，发现api接口只返回了jwt的token，如图所示 如果想将用户的其他字段比如用户名，怎么返回呢jwt配合django的内部框架提供了登录验证功能，在Django框架中直接使用jwt的登录验证视图函数obtain_jwt_token 12from rest_framework_jwt.views import obtain_jwt_token # 导入包url(r'^路由规则$', obtain_jwt_token), # url中配置地址 定义以上路由地址即可，jwt自带的登录验证便可应用jwt提供的视图obtain_jwt_token内部逻辑： 1.定义视图类，继承自APIView 2.定义序列化器，继承自Serializer，然后调用django内部贡献的authenticate()方法 3.接收用户名、密码 4.查询数据库，进行密码对比 5.如果成功，则生成口令并返回这是查看obtain_jwt_token的源码，和jwt的官方文档，就可以理解这个视图的工作原理。 然后自定义接口响应值：1.在users应用下新建utils.py。2.创建函数 12345def jwt_response_payload_handler(token, user=None, request=None): return &#123; 'token': token, 'username':user.username &#125; 3.在settings.py中配置添加 ‘JWT_RESPONSE_PAYLOAD_HANDLER’:’users.utils.jwt_response_payload_handler’, 然后重新运行即可，效果如下 jwt的优点1.因为json的通用性，所以JWT是可以进行跨语言支持的，像JAVA,JavaScript,NodeJS,PHP等很多语言都可以使用。2.因为有了payload部分，所以JWT可以在自身存储一些其他业务逻辑所必要的非敏感信息。3.便于传输，jwt的构成非常简单，字节占用很小，所以它是非常便于传输的。4.它不需要在服务端保存会话信息, 所以它易于应用的扩展]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>web,状态保持</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Celery的异步服务使用]]></title>
    <url>%2F2018%2F08%2F20%2F%E5%85%B3%E4%BA%8ECelery%E7%9A%84%E5%BC%82%E6%AD%A5%E6%9C%8D%E5%8A%A1%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[什么是Celery？Celery是一个专注于实时处理和任务调度的分布式任务队列。所谓任务就是消息，消息中的有效载荷中包含要执行任务需要的全部数据。 为什么使用Celery在开发应用中，我们难免会遇到耗时操作，或者需要添加一些定时任务，而服务器本身的框架对于多进程、线程等已经写好，这些附加工作就会被耗时处理，而使用Celery则可以很好的处理这些任务，相当于开了一个额外的进程来处理这些耗时任务，增强了执行效率。 应用场景 Web应用。当用户触发的一个操作需要较长时间才能执行完成时，可以把它作为任务交给Celery去异步执行，执行完再返回给用户。这段时间用户不需要等待，提高了用户体验与程序执行效率。 定时任务。生产环境经常会跑一些定时任务。假如你有上千台的服务器、上千种任务，定时任务的管理很困难，Celery可以帮助我们快速在不同的机器设定不同种任务。 同步完成的附加工作都可以异步完成。比如发送短信/邮件、推送消息、清理/设置缓存等。 Celery架构 Celery Beat：任务调度器，Beat进程会读取配置文件的内容，周期性地将配置中到期需要执行的任务发送给任务队列。Result Backend：任务处理完后保存状态信息和结果，以供查询。Celery默认已支持Redis、RabbitMQ、MongoDB、Django ORM、SQLAlchemy等方式，当然Redis应该是最佳选择。 例：对于django框架web开发中发送短信功能使用Celery优化为什么要进行优化因为发送短信是一个等待操作，用户那边也会设置一个60秒等待操作，为了提高用户体验，增强效率，采用Celery进行优化，设置异步任务，处理短信发送功能。 1.在mamange.py同目录下，新建工具包celery_tasks2.创建config.py 设置代理人，指定队列，这里连接redis第14个数据库 1broker_url='redis://‘设置的ip地址’/14' 3.创建main.py，创建Celery的对象 12345678910111213141516from celery import Celeryfrom . import configimport os#设置django的配置os.environ.setdefault("DJANGO_SETTINGS_MODULE", "项目的settings")# 创建对象app = Celery('任意字符串')# 加载配置app.config_from_object(config)# 初始化任务# 在指定的包中找tasks.py文件，在这个文件中找@app.task的函数app.autodiscover_tasks([ 'celery_tasks.sms',]) 4.新建sms工具包，在包中新建tasks.py文件，定义发送短信的函任务 123456from utils.ytx_sdk.sendSMS import CCPfrom celery_tasks.main import app# 发送短信任务@app.task(name='sms_send')def sms_send(mobile, sms_code, expires, template_id): CCP.sendTemplateSMS(mobile, sms_code, expires, template_id) 5.启动celery的工人 celery -A celery_tasks.main worker -l info 6.调用：sms_send.delay(参数)]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>web,Celery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于数据库redis与Mysql的区别以及在web开发中的配合使用]]></title>
    <url>%2F2018%2F08%2F18%2F%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93redis%E4%B8%8EMysql%E7%9A%84%E5%8C%BA%E5%88%AB%E4%BB%A5%E5%8F%8A%E5%9C%A8web%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[传统型关系数据库Mysql的瓶颈在互联网领域，MySQL作为一款关系型数据库为互联网的发展做出了卓越的贡献。然而随着互联网的发展，在大数据量高并发的环境下，应用开发也越来越复杂，具有很强的技术挑战性。分表分库子库等无不在增加数据库结构的复杂程度。MySQL数据库也经常存储一些大文本字段，导致数据库表非常的大，在做数据库恢复的时候就导致非常的慢，不容易快速恢复数据库。比如1000万4KB大小的文本就接近40GB的大小，如果能把这些数据从MySQL省去，MySQL将变得非常的小。关系数据库很强大，但是它并不能很好的应付所有的应用场景。MySQL的扩展性差，大数据下IO压力大，表结构更改困难。 Nosql与redisNoSQL最常见的解释是“non-relational”，“Not Only SQL”也被很多人接受，指的是非关系型的数据库。 Nosql的优势易扩展：NoSQL数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。大数据量，高性能：NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单灵活的数据模型：NoSQL无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式。而在关系数据库里，增删字段是一件非常麻烦的事情。如果是非常大数据量的表，增加字段简直就是一个噩梦高可用：NoSQL在不太影响性能的情况，就可以方便的实现高可用的架构。 redisRedis是一个开源（BSD许可）的、内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。redis是一个高性能的key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sortedset–有序集合)和hash（哈希类型）。redis的出现，很大程度补偿了memcached这类key/value存储的不足，在部分场合可以对关系数据库起到很好的补充作用。它提供了Python，Ruby，Erlang，PHP客户端，使用很方便Redis支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。这使得Redis可执行单层树复制。从盘可以有意无意的对数据进行写操作。由于完全实现了发布/订阅机制，使得从数据库在任何地方同步树时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。 结论NoSQL数据库的出现，弥补了关系数据（比如MySQL）在某些方面的不足，在某些方面能极大的节省开发成本和维护成本MySQL和NoSQL都有各自的特点和使用的应用场景，两者的紧密结合将会给数据库发展带来新的思路。让关系数据库关注在关系上，NoSQL关注在存储上。 利用redis做mysql的缓存前面部分已经介绍mysql的瓶颈，当网站的处理和访问量非常大的时候，我们的数据库的压力就变大了，数据库的连接池，数据库同时处理数据的能力就会受到很大的挑战，一旦数据库承受了其最大承受能力，网站的数据处理效率就会大打折扣。此时就要使用高并发处理、负载均衡和分布式数据库，而这些技术既花费人力，又花费资金。 缓存 页面缓存经常用在CMS(content manage system)内存管理系统里面。数据缓存经常会用在页面的具体数据里面。 Redis缓存原理采用redis nosql数据库作为Mysql数据库的缓存，在查找的时候，首先查找redis缓存，如果找到则返回结果；如果在redis中没有找到，那么查找Mysql数据库，找到的花则返回结果并且更新redis；如果没有找到则返回空。 对于写入：用户增删改数据库，先访问mysql，mysql再把数据更新到redis。 Mysql中的数据都是按表存储的；更微观地看，这些表都是按行存储的。每执行一次select查询，Mysql都会返回一个结果集，这个结果集由若干行组成。所以，一个自然而然的想法就是在Redis中找到一种对应于Mysql行的数据结构。Redis中提供了五种基本数据结构，即字符串（string）、列表（list）、哈希（hash）、集合（set）和有序集合（sorted set）。经过调研，发现适合存储行的数据结构有两种，即string和hash。 用户的缓存数据在返回时一般都是JSON的字典格式，对应的存到redis里就是hash格式，这个与python的字典是相对应的。 redis中的hash python中的字典 key 对象 field key value value 即hash会根据要缓存的数据生成唯一标识UUID，UUID作为键，用户的字典数据中的键值对作为UUID键的值，存储到redis中。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库,redis,mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于web开发用户注册功能的图形验证码与短信验证码]]></title>
    <url>%2F2018%2F08%2F18%2F%E5%85%B3%E4%BA%8Eweb%E5%BC%80%E5%8F%91%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8E%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[Flask框架前后端不分离 图片验证码Captcha1.基于captcha实现图片验证码，什么是captcha？Captcha是一个第三方工具，提供生成验证码图片通用解决办法，提供了非常灵活的生成验证码图片的框架，可以自由的组合生成图片过程中的各种元素，例如，字体、颜色、背景、扭曲样式等，不仅提供了丰富的变形资源，即使不能满足需求的情况下，也可以实现固有的接口，创造出自己的字体变形的方式，所以该框架应该可以满足生成验证图片的大部分需求。#### Flask框架中使用captcha完成图片验证码功能将chptcha的第三方包放在utils文件夹中，utils是基于python创建一个flask工程后一个专门存放第三方工具包的文件夹。然后在功能视图模块中 1from utils.captcha.captcha import captcha 视图函数中 1234567891011121314# @user_blueprint是flask框架中，经过创建蓝图，蓝图注册的路由，后面是路由地址@user_blueprint.route('/image_code')def image_code(): # 调用第三方的工具，生成图形验证码数据 name, text, image = captcha.generate_captcha() # 保存text值，存放于session中，用于后续的对比验证 session['image_code'] = text # 创建响应对象，响应体为图片数据 response = make_response(image) # 注意：这里一定要设置响应数据的类型为图片，不然会在网页上无法显示，生成乱码数据 response.content_type = 'image/png' # 返回到响应体 return response 在首页的页面中index.html中，添加如下代码： 1&lt;img src="/user/image_code?1" class="get_pic_code" onclick="generateImageCode()"&gt; 显示图片，设置css样式，并绑定点击事件，生成图片验证码然后在main.js（主页js里）添加： 123function generateImageCode() &#123; $('.get_pic_code').attr('src', $('.get_pic_code').attr('src') + '1');&#125; 点击事件，点击即修改他的src属性，重新生成图片验证码，即可实现$(‘.get_pic_code’)是类选择器，attr获取其src属性进行修改 短信验证码容联云通讯容联云通讯为第三方服务，云通讯平台将传统电信网络通讯能力、基于IP的通讯能力，通过开放API的方式提供给开发者与合作伙伴，让开发者们在应用程序中集成网络电话和电话会议功能变得简单。可提供语音、IVR、短信、IM、视频等web开发接口，这里使用短信功能，详情可查看官方开发文档点这里查看基于python的短信发送接口。 实现短信验证码发送功能将云通讯第三方工具包放入utils文件夹中，云通讯文档使用说明：1.接口声明文件：SDK \CCPRestSDK.py 2.接口函数定义：def sendTemplateSMS(self, to,datas,tempId) 3.参数说明： to: 短信接收手机号码集合,用英文逗号分开,如 ‘13810001000,13810011001’,最多一次发送200个。 datas：内容数据，需定义成数组方式，如模板中有两个参数，定义方式为array[‘Marry’,’Alon’]。 templateId: 模板Id,如使用测试模板，模板id为”1”，如使用自己创建的模板，则使用自己创建的短信模板id即可。4.接口调用示例： 12345678910111213141516171819202122232425262728293031323334编码说明：coding=utf-8或gbk from CCPRestSDK import REST import ConfigParser accountSid= '您的主账号'; #说明：主账号，登陆云通讯网站后，可在控制台首页中看到开发者主账号ACCOUNT SID。 accountToken= '您的主账号Token'; #说明：主账号Token，登陆云通讯网站后，可在控制台首页中看到开发者主账号AUTH TOKEN。 appId='您的应用ID'; #请使用管理控制台中已创建应用的APPID。 serverIP='app.cloopen.com'; #说明：请求地址，生产环境配置成app.cloopen.com。 serverPort='8883'; #说明：请求端口 ，生产环境为8883. softVersion='2013-12-26'; #说明：REST API版本号保持不变。 def sendTemplateSMS(to,datas,tempId): #初始化REST SDK rest = REST(serverIP,serverPort,softVersion) rest.setAccount(accountSid,accountToken) rest.setAppId(appId) result = rest.sendTemplateSMS(to,datas,tempId) for k,v in result.iteritems(): if k=='templateSMS' : for k,s in v.iteritems(): print '%s:%s' % (k, s) else: print '%s:%s' % (k, v) 在视图函数中定义如下视图： 12345678910111213141516171819202122232425262728293031323334# 蓝图注册@user_blueprint.route('/sms_code')def sms_code(): # 接收:手机号，图形验证码，从请求报文中接收 mobile = request.args.get('mobile') imagecode = request.args.get('imagecode') # 验证 # 1.值必填 空在python中为False # 如果都不为空 if not all([mobile, imagecode]): # 返回json数据格式，由前端代码进一步处理 return jsonify(result=1) # 2.检验图形验证码一致，之前图形验证码已经存在session中 imagecode_session = session.get('image_code') if not imagecode_session: return jsonify(result=4) # 删除session中的数据，强制图形验证码过期，防止客户端不停尝试 del session['image_code'] # 验证码不对的情况 if imagecode != imagecode_session: return jsonify(result=2) # 处理 # 1.通过random随机数生成随机的验证码 smscode = str(random.randint(100000, 999999)) # 2.保存验证码，用于后续验证，存到session中 session['sms_code'] = smscode # 3.发送短信，云通讯工具包中封装好的函数功能 ytx_send.sendTemplateSMS(mobile, [smscode, '10'], 1) # 响应 return jsonify(result=3) 在mian.JS中修改如下代码： 123456789101112131415161718192021222324252627282930313233343536373839// 发送短信验证码的点击事件，页面css已经由前端绑定好function sendSMSCode() &#123; // 校验参数，保证输入框有数据填写 // 先移除绑定事件，防止用户不符合条件下点击执行函数 $(".get_code").removeAttr("onclick"); // 前端检验规则 var mobile = $("#register_mobile").val(); if (!mobile) &#123; $("#register-mobile-err").html("请填写正确的手机号！"); $("#register-mobile-err").show(); $(".get_code").attr("onclick", "sendSMSCode();"); return; &#125; var imageCode = $("#imagecode").val(); if (!imageCode) &#123; $("#image-code-err").html("请填写验证码！"); $("#image-code-err").show(); $(".get_code").attr("onclick", "sendSMSCode();"); return; &#125; // TODO 发送短信验证码 // 根据后端返回的json数据实现不同提示，局部刷新，要使用ajax请求 $.get('/user/sms_code',&#123; 'mobile':mobile, 'imagecode':imageCode, &#125;,function (data) &#123; if(data.result==1)&#123; alert('请填写完整数据'); &#125;else if(data.result==2 || data.result==4)&#123; alert('图形验证码错误'); $(".get_code").attr("onclick", "sendSMSCode();"); generateImageCode(); $("#imagecode").val(''); &#125;else if(data.result==3)&#123; alert('请查看手机'); &#125; &#125;);&#125; 至于短信验证码等待60秒功能会在下文Django的框架中实现。 Django框架前后端分离相比于Flas,k所以不需要再写前端代码，只要按照restful的开发格式，返回json数据即可 短信验证码djang框架实现短信验证码功能，同样使用第三方工具包云通讯功能，云通讯配置及使用方法在上述过程中已有介绍，这里就不在赘述。 Django框架API接口设计访问方式： GET /sms_codes/(?P1[3-9]\d{9})/ 请求参数： 路径参数与查询字符串参数 参数 类型 是否必须 说明 mobile str 是 手机号 返回数据：json 返回值 类型 是否必传 说明 message str 否 OK，发送成功 后端代码在应用的urls.py中配置路由 123urlpatterns = [ url(r'^sms_code/(?P&lt;mobile&gt;1[3-9]\d&#123;9&#125;)/$',views.SMSCodeView.as_view()),] 在应用的views.py中定义视图 12345678910111213141516171819202122232425class SMSCodeView(APIView): def get(self, request, mobile): ''' 接收手机号，发送短信验证码 :param mobile: 手机号 :return: 是否成功 ''' # 获取redis的连接 redis_cli = get_redis_connection('verify_code') # 检查是否在60s内有发送记录 sms_flag = redis_cli.get('sms_flag_' + mobile) if sms_flag: raise serializers.ValidationError('请稍候再发送短信验证码') # 生成短信验证码 sms_code = str(random.randint(100000, 999999)) # 保存短信验证码与发送记录 # 存验证码，300秒 redis_cli.setex('sms_code_' + mobile, 300, sms_code) # 存发送标记，60秒 redis_cli.setex('sms_flag_' + mobile, 60, 1) # 发送短信 CCP.sendTemplateSMS(mobile,sms_code,5,1) return Response(&#123;'message': 'OK'&#125;) 用的djang的drf框架，别忘了导入各种包(response对象，redis数据库连接，APIview，云通讯，random，序列化器) 关于与redis数据库交互的优化上边代码 12345# 保存短信验证码与发送记录 # 存验证码，300秒 redis_cli.setex('sms_code_' + mobile, 300, sms_code) # 存发送标记，60秒 redis_cli.setex('sms_flag_' + mobile, 60, 1) 这部分代码与redis数据库交互了两次，如何进行优化，只交互一次呢？采用redis管道，代码如下： 12345# 优化redis交互，减少通信的次数，管道pipeline redis_pl = redis_cli.pipeline() redis_pl.setex('sms_code_' + mobile, 300, sms_code) redis_pl.setex('sms_flag_' + mobile, 60, 1) redis_pl.execute() 即可优化redis的交互次数。]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>web,验证码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Linux的常用基本命令（二）]]></title>
    <url>%2F2018%2F08%2F16%2F%E5%85%B3%E4%BA%8ELinux%E7%9A%84%E7%BB%88%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[接上面《关于Linux的常用基本命令（一）》点这里#### 管道命令1【命令1】 | 【命令2】 # 命令1的输出结果作为命令2的输入#### 查找某个文件的文本1234grep 【选项】 “字符串” 【文件】选项：-i 忽略大小写 -n 显示匹配行及行号 -v 取反（显示余下的信息）例： ps -aux | grep ’mysql‘ 查看运行中的进程，带有mysql的进程 查找文件1234find 【路径】 【选项】选项：-name ’字符串‘ # 查找该文件名的文件 -size +（-）’大小‘ # 查找文件大于（小于）多少的文件 -permission 权限 # 查找拥有该权限的文件 tar打包压缩文件与解压缩12345678tar 【选项】【打包后的文件名】【 要打包的文件名】选项： -c 生成打包文件 -v 显示进度 -f 指定打包文件名称，所以f选项要放最后 -x 拆包解包 -z gzip格式压缩解压 -j bzip2格式压缩解压 c 指定目录 gzip格式压缩解压12gizp 【文件名】 # 压缩文件gzip -d 【文件名】 # 解压缩文件 查看命令位置1which 查看当前用户登录1who # tty 本地登录 pts 远程登录 授权当前用户执行命令1sudo # 管理员权限 退出终端，回到上一用户，退出远程1exit 软件卸载与安装123sudo apt-get install “安装包” # 安装sudo apt-get remove “安装包” # 删除sudo apt-get update “安装包” # 更新 关机重启12shutdown -h now （或加时间） # 立即关机，或者多少时间后关机 -r # 重启]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis 延迟加载策略]]></title>
    <url>%2F2018%2F08%2F15%2FMyBatis%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[1.延迟加载概述 1.1.延时加载是在进行有可能需要多表查询的数据时使用的策略,他最大的特点是当你什么时候需要数据,什么时候进行查询1.2.根据表的关联进行查寻优点:先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快 2.使用延时加载2.1实现需求需求：查询账户(Account)信息并且关联查询用户(User)信息。如果先查询账户(Account)信息即可满足要求，当我们需要查询用户(User)信息时再查询用户(User)信息。把对用户(User)信息的按需去查询就是延迟加载。工程目录结构如下： 2.2使用 Assocation 实现延迟加载需求：查询账户信息同时查询用户信息。Account 实体类中加入一个 User 类的对象12345678public class Account &#123;private int id;private int uid;private double money;//加入一个用户对象的信息 has a 关系private User user; //省略 getter 与 setter&#125; 2.3 第一步：只查询账户信息 的 DAO 接口AccountDao 类中添加查询账户信息的方法: 2.1开启全局配置2.1开启全局配置1234 &lt;!-- 在sqlMapconfig中配置--&gt; &lt;settings&gt; &lt;setting name="lazyLoadingEnabled" value="true"/&gt;&lt;/settings&gt;]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Linux终端的常用命令（一）]]></title>
    <url>%2F2018%2F08%2F15%2F%E5%85%B3%E4%BA%8ELinux%E7%9A%84%E7%BB%88%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[前言 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Linux由Unix发展而来，于1991年林纳斯（linus）发布，分为内核与发行版，内核（kernel）是系统的心脏，是运行程序和管理像磁盘和打印机等硬件设备的核心程序，主要做一些基本的，也是重要的操作。比如进程管理、内存管理、磁盘管理、驱动管理、电源管理、安全管理等。Linux 内核版本又分为 稳定版 和 开发版，两种版本是相互关联，相互循环。稳定版：具有工业级强度，可以广泛地应用和部署。新的稳定版相对于较旧的只是修正一些 bug 或加入一些新的驱动程序开发版：由于要试验各种解决方案，所以变化很快内核源码网址：点这里&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Linux发行版通常包含了包括桌面环境、办公套件、媒体播放器、数据库等应用软件。主要有：ubantu，centos，redhat, debian等，这里主要是ubantu的基本常用命令。### Linux终端命令基本使用———-终端命令格式：Command 【-options（选项，可以配合使用）】【parameter（对象）】 1. 查看文件信息（在当前路径下输入即可查看当前路径文件）123ls -l # 查看详情ls -a # 查看所有文件ls -h # 配合-l显示文件大小 2. 通配符，可以代替字符12* # 代表0个或多个任意字符？ # 代表任意一个字符 3. 清屏12clear按键：ctrl +L 4. 切换路径（分为相对路径和绝对路径，相对路径从当前目录开始；绝对路径从根目录（/）开始）12cd ./Desktop # .代表当前路径cd ../ # ..代表上一级路径 5. 显示当前绝对路径1pwd 6. 创建目录12mkdir 目录名mkdir a/b/c -p # 创建级联目录 7. 创建文件（文件名指定后缀名）12touch 文件名touch 文件1 文件2 文件3 # 创建多个文件 8. 删除文件，目录123rm -i # 删除文件给予交互提示rm -f # 强制删除rm -r # 递归删除，删除目录 9. 拷贝文件，目录12345cp 【源文件名】【目标目录路径】# 拷贝文件不能在本目录下，不能重名例： cp 1.txt ./a 将1.txt复制到当前目录的a目录下cp 【源文件名】【目标文件名】# 拷贝并重命名例： cp a.txt b.txt 复制a并命名为b选项： -r 拷贝文件夹 -f 强制拷贝 -i交互提示 10. 移动文件，文件夹12mv 【源文件名】【移动目标路径】# 移动目录不用-r 例：mv 1.txt ./a 将1文件移动到当前目录的a目录下mv 【源文件名】【移动后文件名】# 重命名，不能重名 例： mv a.py b.py 11. 树状显示目录1tree 12. 查看历史命令12history # 显示历史命令！数字 # 引用某一行命令 例：！20，引用20行命令 13. 查看，写入文件内容12cat 【文件名】 # 查看 例：cat 1.txtgedit 【文件名】# 写入 例 ： gedit 1.txt 14. 重定向（将命令执行结果保存到另一个文件中）123&gt; # 覆盖&gt;&gt; # 追加 例： cat 1.txt 2.txt &gt; 3,txt 将1,2两个文件的内容重定向到3里，3.txt不存在则创建 15. 分屏显示内容1more # 分屏显示文件内容，一般接到其他命令后，空格切换屏幕]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博客]]></title>
    <url>%2F2018%2F08%2F14%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[前言 学习编程之后，逐渐在这一领域有了一定的了解，在CSDN博客上看各种大神写的文章，那些未知的技术，引起了我的求知欲，同时看着别人炫酷的博客，也让我有了一个搭建自己的博客网站的想法，来对自己学过的知识，进行总结梳理，于是开始了我的博客之旅。 1.搭建自己的博客网站需要耐心 对于我这种博客小白来说，搭建自己的个人博客，着实费了一番功夫，经过大约一周时间的研究学习，查阅各种资料，解决各种bug，尝试不同的主题效果，终于搭建好我自己的个人博客网站，可以开始写自己的第一篇博客文章，此刻我的心情是非常激动的，毕竟这大约一周时间的努力，取得了一定的成果，效果还比较满意，不过还要继续完善。 总的来说，过程非常繁琐，需要耐心，网上教程都很详细，一步步按照教程走即可，但是过程中有些细节需要综合自己的实际情况来定，不然会出一些难解决的bug，所以要懂一些js，css知识的原理。我用的是github+hexo搭建的，个人认为比较简单吧，也研究过ruby，jkelly那些方法，不过没安装上环境，就换了hexo，有兴趣的可以好好研究下。 2. IT知识研究领域 我主要学习的是Python，所以我的博客内容主要围绕着python来展开的，当然这只是一种编写程序的语言方式，所以本质上还是编程以及相关内容，比如Linux，web开发，框架，算法，爬虫，人工智能等，我个人对人工智能非常感兴趣，所以也会慢慢往这个方向去靠近，机器学习，神经网络等，自己慢慢研究学习吧。 3. 写博客文章的一些基本格式与上传命令 为了以后方便写博客，对于我这个博客小白，还是有必要在这里对于一些文章相关格式及命令，进行总结的。 通过github+hexo搭建好博客后，如何创建一篇新博客呢 在搭建博客的时候，会安装git软件，在根目录下打开git，通过git命令来执行，新建一篇博客：1$ hexo new "你的博客的名称" 然后在根目录文件夹下source/_posts下新生成一个md文件，名称就是你自己起的名字，打开就可以开始写博客啦，要用markdown语法写，所以要提前准备一款编辑器，我个人用的是小书匠编辑器，还不错。 文章的一些格式属性有以下几种可以自己设置：12345title: 文章标题date: 创建时间，这里可以随意修改categories: 文章分类目录，可以为空tags: 文章标签，可空，多标签请用格式[tag1,tag2,tag3]description: 对本页的描述，相当于是一个简介，如果这个定义了，就会在首页中出现这里的内容而不会出现整个文章详细内容。 然后下面就可以开始写文章了，写完即可通过git上传了 123$ hexo clean$ hexo g$ hexo d 即可部署到github上。 4.开启博客之旅 以前的学习笔记都记录在本子上，或者其他文档里，之后将会慢慢整理在自己的博客上，来完善自己的学习体系，同时搭建自己的博客，让自己的博客更炫酷。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>第一篇</tag>
      </tags>
  </entry>
</search>
